//////////////////////////////////////////////////////////////////////////////////////////////////////
///// Grammar For ORthodox //////////// Grammar For ORthodox //////////// Grammar For ORthodox ///////
//////////////////////////////////////////////////////////////////////////////////////////////////////

-- block, expressions, literals ------>

block       -> "{" [ ASSIGNMENT | VAR_UPDATE | expr | stmt ]* "}"

expr        -> literals op-expr | op-expr | fn_call expr | break_expr  | return_expr  | grouped_expr | NULL

stmt         -> if_stmt | for_stmt

op-expr      -> OPERATOR expr
fn_call      -> IDENTIFIER "(" [ expr ","? ]* ")"
if_stmt      -> "if" expr ":" "{" block "}" [ "elif" expr ":" "{" block "}"]* [ "else" ":" "{" block "}"]
for_stmt     -> "for" IDENTIFIER "in" expr ":" expr ":" "{" block "}"
break_expr   -> "break" expr
return_expr  -> "return" expr
grouped_expr -> "(" expr ")"

literals    -> number | string | IDENTIFIER | member_access

member_access ->  IDENTIFIER [ "." IDENTIFIER ]+

------------------------------------end


ASSIGNMENT  ->  IDENTIFIER "::" type [ "=" expr ]?
VAR_UPDATE  ->  [IDENTIFIER | MEMBER_ACCESS]? UPDATE_OPERATOR expr


-- all valid types ----------------->

type -> number_type | string_type | char_type 
    | pointer_type
    | reference_type
    | array_type
    | record_type 

number_type -> "mut"? ["i8" | "i16" | "i32" | "i64" | "f32" | "f64" | "f128" | "u8" | "u16" | "u32"]
string_type -> "mut"? "string"
char_type   -> "mut"? "char"

pointer_type   -> "mut"? "*" type
reference_type -> "mut"? "@" type
array_type     -> "mut"? "[" SIZE "]" type
record_type    -> "mut"? IDENTIFIER

----------------------------------end

SIZE             -> [0-9]+
OPERATOR         -> "+" | "-" | "*"["*"]? | "/" | "%" | ">" ["=" | ">"]? | "<" ["=" | "<"]?  | "==" | "!" ["="]? 
UPDATE_OPERATOR  -> [ "+" | "-" | "*"["*"]? | "/" | "%" ]? "="
IDENTIFIER       -> [a-zA-Z][a-zA-Z0-9_]*
